/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2014-07-04 14:16:28.669922
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((IkReal(1.00000000000000))*(x5));
x13=((IkReal(0.0692600000000000))*(x0));
x14=((IkReal(0.120638920419598))*(x8));
x15=((IkReal(0.0692600000000000))*(x1));
x16=((IkReal(0.120638920419598))*(x9));
x17=((IkReal(0.819151867053070))*(x0));
x18=((IkReal(1.00000000000000))*(x7));
x19=((IkReal(0.410000000000000))*(x1));
x20=((IkReal(0.346232239743044))*(x0));
x21=((IkReal(1.06978384366929e-6))*(x7));
x22=((IkReal(0.0691969241028346))*(x7));
x23=((IkReal(1.06978384366929e-6))*(x5));
x24=((IkReal(0.573576689470092))*(x7));
x25=((IkReal(1.00000000000000))*(x0));
x26=((x5)*(x9));
x27=((x3)*(x4));
x28=((x0)*(x5));
x29=((x2)*(x6));
x30=((x2)*(x3));
x31=((x1)*(x4));
x32=((x1)*(x2));
x33=((x5)*(x6));
x34=((IkReal(1.00000000000000))*(x31));
x35=((((IkReal(-1.00000000000000))*(x34)))+(x30));
x36=((((IkReal(0.819151867053070))*(x30)))+(((IkReal(-0.819151867053070))*(x31))));
x37=((((IkReal(-1.00000000000000))*(x30)))+(x34));
x38=((((IkReal(0.573576689470092))*(x31)))+(((IkReal(-0.573576689470092))*(x30))));
x39=((x35)*(x8));
x40=((x38)*(x7));
x41=((x36)*(x7));
x42=((x0)*(((x32)+(x27))));
x43=((((x27)*(x6)))+(((x1)*(x29))));
x44=((IkReal(0.819151867053070))*(x41));
x45=((x39)*(x5));
x46=((x25)*(((((IkReal(-1.00000000000000))*(x32)))+(((IkReal(-1.00000000000000))*(x27))))));
x47=((((IkReal(-1.00000000000000))*(x1)*(x29)))+(((IkReal(-1.00000000000000))*(x27)*(x6))));
x48=((IkReal(0.573576689470092))*(x26)*(x37));
x49=((x46)*(x7));
x50=((x47)*(x7));
x51=((x40)+(((IkReal(-0.819151867053070))*(x32)))+(((IkReal(-0.819151867053070))*(x27))));
x52=((x51)*(x8));
x53=((x51)*(x9));
x54=((IkReal(0.573576689470092))*(x52));
x55=((x45)+(x53));
x56=((x11)*(x55));
x57=((((IkReal(-1.00000000000000))*(x45)))+(((IkReal(-1.00000000000000))*(x53))));
x58=((x10)*(x57));
x59=((x48)+(x44)+(x54));
x60=((x59)+(((IkReal(-0.469846416077544))*(x32)))+(((IkReal(-0.469846416077544))*(x27))));
x61=((x59)+(((IkReal(-0.469846416077544))*(x32)))+(((IkReal(-0.469846416077544))*(x27))));
x62=((x10)*(x60));
x63=((x11)*(x60));
eerot[0]=((((IkReal(0.469846416062352))*(IKcos(j[3]))*(IKsin(j[0]))))+(((((((IkReal(7.17421430610894e-6))*(((((IkReal(0.328990218703470))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.469846416077544))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(-3.37077887989753e-6))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(3.37077887989753e-6))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(7.17421430610894e-6))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(7.17421430610894e-6))*(((((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-4.81396797251659e-6))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKsin(j[5]))))+(((((((IkReal(7.17421430610894e-6))*(((((IkReal(-0.819151867053070))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(0.819151867053070))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((IkReal(7.17421430610894e-6))*(((((IKsin(j[0]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((IkReal(0.469846416062352))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.671009781274832))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.819151867026582))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.671009781274832))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((((((IkReal(-3.63348570114116e-6))*(((((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-3.63348570114116e-6))*(((((IkReal(-0.573576689470092))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(0.819151867053070))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-1.00000000000000))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-0.819151867053070))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((IkReal(0.328990218692832))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.328990218692832))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((((((IkReal(-0.469846416062352))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.469846416062352))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((IkReal(-1.70718023455018e-6))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(-3.63348570114116e-6))*(((((IkReal(0.328990218703470))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.469846416077544))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(-3.63348570114116e-6))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(2.43810444566680e-6))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-3.63348570114116e-6))*(((((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(1.70718023455018e-6))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((((((IkReal(0.819151867026582))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-0.819151867026582))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4])))));
eerot[1]=((((IkReal(-2.57060970079176e-6))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(3.67120870587280e-6))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(3.67120870587280e-6))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((IkReal(0.152972124389040))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.227973017164468))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(-0.227973017164468))*(((((IkReal(0.328990218703470))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.469846416077544))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(-0.107112305077110))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(-0.227973017164468))*(((((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.107112305077110))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((((((IkReal(5.24302594747271e-6))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-3.67120870587280e-6))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-5.24302594747271e-6))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(-6.40055422974826e-6))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-3.67120870587280e-6))*(IKcos(j[3]))*(IKsin(j[0]))))+(((((((IkReal(-6.40055422974826e-6))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(6.40055422974826e-6))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((IkReal(-0.457474161880760))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.973667450099815))*(((((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.457474161880760))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(0.973667450099815))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(0.973667450099815))*(((((IkReal(0.328990218703470))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.469846416077544))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(-0.653340382747027))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKsin(j[5]))))+(((((((IkReal(-0.227973017164468))*(((((IkReal(-0.573576689470092))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(0.819151867053070))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-1.00000000000000))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-0.819151867053070))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((IkReal(-0.227973017164468))*(((((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((IkReal(0.973667450099815))*(((((IkReal(-0.819151867053070))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(0.819151867053070))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((IkReal(0.973667450099815))*(((((IKsin(j[0]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((IkReal(2.57060970079176e-6))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1])))));
eerot[2]=((((((((IkReal(-0.973667450124388))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(-0.457474161892305))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(-0.973667450124388))*(((((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.457474161892305))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.653340382763516))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.973667450124388))*(((((IkReal(0.328990218703470))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.469846416077544))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((IkReal(-1.55825578479576e-6))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(1.27644813546169e-6))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-8.93779194390771e-7))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-1.27644813546169e-6))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(-6.25831340994418e-7))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.227973017185487))*(((((IkReal(0.328990218703470))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(-0.469846416077544))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(0.152972124403144))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(0.107112305086986))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.107112305086986))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(-0.227973017185487))*(((((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.671009781296530))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-0.227973017185487))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((IkReal(6.25831340994418e-7))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((IkReal(-8.93779194390771e-7))*(IKcos(j[3]))*(IKsin(j[0]))))+(((((((IkReal(-0.227973017185487))*(((((IKsin(j[0]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-0.227973017185487))*(((((IkReal(-0.819151867053070))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(0.819151867053070))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((IkReal(8.93779194390771e-7))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(8.93779194390771e-7))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((IkReal(-0.973667450124388))*(((((IkReal(-0.573576689470092))*(IKcos(j[3]))*(IKsin(j[0]))))+(((IkReal(0.819151867053070))*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-1.00000000000000))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-0.819151867053070))*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((IkReal(-0.973667450124388))*(((((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((IkReal(1.55825578479576e-6))*(IKsin(j[0]))*(IKsin(j[3]))))+(((IkReal(-1.55825578479576e-6))*(((((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[2]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4])))));
IkReal x64=((IkReal(8.76315432884912e-7))*(x0));
IkReal x65=((IkReal(1.00000000000000))*(x13));
eetrans[0]=((((x20)*(x31)))+(((IkReal(-1.00000000000000))*(x20)*(x30)))+(((x0)*(x19)))+(((x8)*(((((IkReal(-1.00000000000000))*(x30)*(x64)))+(((x31)*(x64)))+(((IkReal(-6.13603075500424e-7))*(x33)))+(((IkReal(-6.13603075500424e-7))*(x49)))))))+(((x22)*(x46)))+(((IkReal(0.0120000000000000))*(x6)))+(((x9)*(((((x21)*(x6)))+(((x23)*(x42)))))))+(((IkReal(0.138456924102835))*(x33)))+(((x16)*(((((IkReal(-1.00000000000000))*(x12)*(x42)))+(((IkReal(-1.00000000000000))*(x18)*(x6)))))))+(((x14)*(((((x17)*(x30)))+(((IkReal(0.573576689470092))*(x33)))+(((IkReal(-1.00000000000000))*(x17)*(x31)))+(((x24)*(x46)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x32)*(x65)))+(((IkReal(-1.00000000000000))*(x27)*(x65))))))));
eerot[3]=((((((((IkReal(0.469846416062352))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(-0.671009781274832))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(-0.819151867026582))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((IkReal(0.671009781274832))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((IkReal(-7.17421430610894e-6))*(((((((((IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-7.17421430610894e-6))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.819151867053070))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(-0.819151867053070))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((IkReal(3.63348570114116e-6))*(((((IkReal(1.00000000000000))*(IKcos(j[0]))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((IkReal(3.63348570114116e-6))*(((((IkReal(0.819151867053070))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-1.00000000000000))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((IkReal(-0.819151867053070))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((IkReal(-0.819151867026582))*(IKcos(j[0]))*(IKsin(j[3]))))+(((IkReal(-0.819151867026582))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((IkReal(-7.17421430610894e-6))*(((((IkReal(-0.469846416077544))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-0.328990218703470))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-4.81396797251659e-6))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(-7.17421430610894e-6))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(3.37077887989753e-6))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-7.17421430610894e-6))*(((((IkReal(0.671009781296530))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(0.671009781296530))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-3.37077887989753e-6))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[5]))))+(((IkReal(0.469846416062352))*(IKcos(j[0]))*(IKcos(j[3]))))+(((((((IkReal(-1.70718023455018e-6))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(3.63348570114116e-6))*(((((IkReal(0.671009781296530))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(0.671009781296530))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(2.43810444566680e-6))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(3.63348570114116e-6))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(1.70718023455018e-6))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(3.63348570114116e-6))*(((((IkReal(-0.469846416077544))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-0.328990218703470))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((IkReal(0.328990218692832))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((IkReal(0.469846416062352))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(0.469846416062352))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-0.328990218692832))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2])))));
eerot[4]=((((((((IkReal(6.40055422974826e-6))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((IkReal(-3.67120870587280e-6))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(5.24302594747271e-6))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(-5.24302594747271e-6))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((IkReal(0.227973017164468))*(((((IkReal(1.00000000000000))*(IKcos(j[0]))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((IkReal(0.227973017164468))*(((((IkReal(0.819151867053070))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-1.00000000000000))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((IkReal(-0.819151867053070))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((IkReal(-2.57060970079176e-6))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(2.57060970079176e-6))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((IkReal(6.40055422974826e-6))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(6.40055422974826e-6))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(-3.67120870587280e-6))*(IKcos(j[0]))*(IKcos(j[3]))))+(((((((IkReal(0.227973017164468))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(0.107112305077110))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.227973017164468))*(((((IkReal(-0.469846416077544))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-0.328990218703470))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(0.152972124389040))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(-0.107112305077110))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(0.227973017164468))*(((((IkReal(0.671009781296530))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(0.671009781296530))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((IkReal(-0.653340382747027))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(-0.973667450099815))*(((((IkReal(0.671009781296530))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(0.671009781296530))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-0.457474161880760))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(-0.973667450099815))*(((((IkReal(-0.469846416077544))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-0.328990218703470))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-0.973667450099815))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(0.457474161880760))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((((((IkReal(-3.67120870587280e-6))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-3.67120870587280e-6))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((IkReal(-0.973667450099815))*(((((((((IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-0.973667450099815))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.819151867053070))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(-0.819151867053070))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
eerot[5]=((((IkReal(6.25831340994418e-7))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((IkReal(0.107112305086986))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.227973017185487))*(((((IkReal(-0.469846416077544))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-0.328990218703470))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(0.152972124403144))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.227973017185487))*(((((IkReal(0.671009781296530))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(0.671009781296530))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.227973017185487))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(-0.107112305086986))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((IkReal(-6.25831340994418e-7))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((IkReal(0.653340382763516))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.973667450124388))*(((((IkReal(0.671009781296530))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(0.671009781296530))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((IkReal(0.973667450124388))*(((((IkReal(0.573576689470092))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((IkReal(-0.457474161892305))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(0.973667450124388))*(((((IkReal(-0.469846416077544))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-0.328990218703470))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.469846416077544))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(0.457474161892305))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[5]))))+(((IkReal(-8.93779194390771e-7))*(IKcos(j[0]))*(IKcos(j[3]))))+(((((((IkReal(0.973667450124388))*(((((IkReal(0.819151867053070))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((IkReal(-1.00000000000000))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((IkReal(-0.819151867053070))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(0.573576689470092))*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((IkReal(0.973667450124388))*(((((IkReal(1.00000000000000))*(IKcos(j[0]))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((IkReal(1.55825578479576e-6))*(((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((IkReal(-8.93779194390771e-7))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(1.27644813546169e-6))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(-1.27644813546169e-6))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((IkReal(-8.93779194390771e-7))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-8.93779194390771e-7))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((IkReal(1.55825578479576e-6))*(IKcos(j[0]))*(IKsin(j[3]))))+(((IkReal(1.55825578479576e-6))*(((((IkReal(-1.00000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IkReal(-1.00000000000000))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((IkReal(0.227973017185487))*(((((((((IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((IkReal(-1.00000000000000))*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((IkReal(0.227973017185487))*(((((IkReal(-0.573576689470092))*(IKcos(j[0]))*(IKcos(j[3]))))+(((IkReal(0.819151867053070))*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((IkReal(-0.819151867053070))*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((IkReal(-0.573576689470092))*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.573576689470092))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
IkReal x66=((x31)*(x6));
IkReal x67=((x29)*(x3));
IkReal x68=((IkReal(1.00000000000000))*(x43));
eetrans[1]=((((IkReal(-1.00000000000000))*(x14)*(((((IkReal(-0.819151867053070))*(x66)))+(((IkReal(-0.573576689470092))*(x28)))+(((x24)*(x47)))+(((IkReal(0.819151867053070))*(x67)))))))+(((x7)*(((((IkReal(0.0692600000000000))*(x27)*(x6)))+(((x15)*(x29)))))))+(((IkReal(-1.00000000000000))*(x19)*(x6)))+(((IkReal(0.346232239743044))*(x67)))+(((IkReal(-0.346232239743044))*(x66)))+(((IkReal(0.0120000000000000))*(x0)))+(((IkReal(-1.00000000000000))*(x22)*(x47)))+(((IkReal(0.138456924102835))*(x28)))+(((IkReal(-1.00000000000000))*(x16)*(((((x0)*(x18)))+(((IkReal(-1.00000000000000))*(x12)*(x68)))))))+(((x8)*(((((IkReal(8.76315432884912e-7))*(x67)))+(((IkReal(-6.13603075500424e-7))*(x28)))+(((IkReal(-8.76315432884912e-7))*(x66)))+(((IkReal(6.13603075500424e-7))*(x50)))))))+(((x9)*(((((x0)*(x21)))+(((IkReal(-1.00000000000000))*(x23)*(x68))))))));
eerot[6]=((((IkReal(-0.819151867026582))*(x26)*(x37)))+(((IkReal(3.63348570114116e-6))*(x58)))+(((IkReal(3.63348570114116e-6))*(x63)))+(((IkReal(-0.328990218692832))*(x32)))+(((IkReal(0.573576689451545))*(x41)))+(((IkReal(-0.328990218692832))*(x27)))+(((IkReal(-7.17421430610894e-6))*(x56)))+(((IkReal(-7.17421430610894e-6))*(x62)))+(((IkReal(-0.819151867026582))*(x52))));
eerot[7]=((((IkReal(0.227973017164468))*(x58)))+(((IkReal(0.227973017164468))*(x63)))+(((IkReal(6.40055422974826e-6))*(x52)))+(((IkReal(2.57060970079176e-6))*(x32)))+(((IkReal(-0.973667450099815))*(x56)))+(((IkReal(-0.973667450099815))*(x62)))+(((IkReal(6.40055422974826e-6))*(x26)*(x37)))+(((IkReal(-4.48171926785703e-6))*(x41)))+(((IkReal(2.57060970079176e-6))*(x27))));
eerot[8]=((((IkReal(0.227973017185487))*(x56)))+(((IkReal(-1.09110316455260e-6))*(x41)))+(((IkReal(0.227973017185487))*(x10)*(x61)))+(((IkReal(0.973667450124388))*(x10)*(((((IkReal(-1.00000000000000))*(x12)*(x39)))+(((IkReal(-1.00000000000000))*(x53)))))))+(((IkReal(1.55825578479576e-6))*(x26)*(x37)))+(((IkReal(0.973667450124388))*(x11)*(x61)))+(((IkReal(6.25831340994418e-7))*(x32)))+(((IkReal(6.25831340994418e-7))*(x27)))+(((IkReal(1.55825578479576e-6))*(x52))));
eetrans[2]=((IkReal(0.272500000000000))+(((IkReal(-0.346232239743044))*(x27)))+(((IkReal(-1.00000000000000))*(x16)*(x37)*(x5)))+(((x7)*(((((IkReal(-1.25150731567958e-6))*(x31)))+(((IkReal(1.25150731567958e-6))*(x30)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x15)*(x4)))+(((IkReal(0.0692600000000000))*(x30)))))))+(((IkReal(-0.410000000000000))*(x3)))+(((x8)*(((((x21)*(x38)))+(((IkReal(-8.76315432884912e-7))*(x27)))+(((IkReal(-8.76315432884912e-7))*(x32)))))))+(((IkReal(-1.00000000000000))*(x14)*(((x40)+(((IkReal(-0.819151867053070))*(x32)))+(((IkReal(-0.819151867053070))*(x27)))))))+(((IkReal(-0.346232239743044))*(x32)))+(((IkReal(0.0844723370337335))*(x41)))+(((x26)*(((((IkReal(-1.06978384366929e-6))*(x30)))+(((IkReal(1.06978384366929e-6))*(x31))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((IkReal(7.17421430610894e-6))*(r00)))+(((IkReal(-0.227973017185487))*(r02)))+(((IkReal(0.973667450099815))*(r01))));
new_r01=((((IkReal(-3.63348570114116e-6))*(r00)))+(((IkReal(-0.973667450124388))*(r02)))+(((IkReal(-0.227973017164468))*(r01))));
new_r02=((((IkReal(7.81363564826447e-6))*(r01)))+(((IkReal(1.90227947645611e-6))*(r02)))+(((IkReal(-0.999999999967664))*(r00))));
new_px=((((IkReal(1.15073725284892e-6))*(r01)))+(((IkReal(2.80154329870014e-7))*(r02)))+(px)+(((IkReal(-0.147272960323829))*(r00))));
new_r10=((((IkReal(-0.973667450099815))*(r11)))+(((IkReal(0.227973017185487))*(r12)))+(((IkReal(-7.17421430610894e-6))*(r10))));
new_r11=((((IkReal(0.973667450124388))*(r12)))+(((IkReal(0.227973017164468))*(r11)))+(((IkReal(3.63348570114116e-6))*(r10))));
new_r12=((((IkReal(-7.81363564826447e-6))*(r11)))+(((IkReal(0.999999999967664))*(r10)))+(((IkReal(-1.90227947645611e-6))*(r12))));
new_py=((((IkReal(-1.15073725284892e-6))*(r11)))+(((IkReal(-1.00000000000000))*(py)))+(((IkReal(0.147272960323829))*(r10)))+(((IkReal(-2.80154329870014e-7))*(r12))));
new_r20=((((IkReal(-7.17421430610894e-6))*(r20)))+(((IkReal(0.227973017185487))*(r22)))+(((IkReal(-0.973667450099815))*(r21))));
new_r21=((((IkReal(0.227973017164468))*(r21)))+(((IkReal(0.973667450124388))*(r22)))+(((IkReal(3.63348570114116e-6))*(r20))));
new_r22=((((IkReal(-1.90227947645611e-6))*(r22)))+(((IkReal(0.999999999967664))*(r20)))+(((IkReal(-7.81363564826447e-6))*(r21))));
new_pz=((IkReal(0.272500000000000))+(((IkReal(-2.80154329870014e-7))*(r22)))+(((IkReal(-1.15073725284892e-6))*(r21)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.147272960323829))*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j5array[0], cj5array[0], sj5array[0];
bool j5valid[1]={false};
_nj5 = 0;
for(int ij5 = 0; ij5 < 0; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 0; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x69=IKcos(j4);
IkReal x70=((cj5)*(r21));
IkReal x71=((r20)*(sj5));
IkReal x72=((IkReal(0.285670739590656))*(x69));
sj1array[0]=((((IkReal(-0.407979829016951))*(r22)*(x69)))+(((IkReal(0.454597568858948))*(x70)))+(((IkReal(0.454597568858948))*(x71)))+(((x70)*(x72)))+(((IkReal(2.43902439024390))*(pz)))+(((IkReal(0.318312853909878))*(r22)))+(((x71)*(x72))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst48;
IkReal x73=(cj1)*(cj1);
IkReal x74=((r02)*(r10));
IkReal x75=((r00)*(r12));
IkReal x76=((IkReal(0.168100000000000))*(x73));
gconst48=IKsign(((((IkReal(0.000144000000000000))*(x74)))+(((IkReal(-0.000144000000000000))*(x75)))+(((x74)*(x76)))+(((IkReal(-1.00000000000000))*(x75)*(x76)))));
IkReal x77=(cj1)*(cj1);
IkReal x78=((r00)*(r12));
IkReal x79=((r02)*(r10));
IkReal x80=((IkReal(1167.36111111111))*(x77));
dummyeval[0]=((((x79)*(x80)))+(((IkReal(-1.00000000000000))*(x78)*(x80)))+(x79)+(((IkReal(-1.00000000000000))*(x78))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x81=(cj1)*(cj1);
IkReal x82=((r01)*(r12));
IkReal x83=((r02)*(r11));
IkReal x84=((IkReal(0.168100000000000))*(x81));
gconst49=IKsign(((((IkReal(-1.00000000000000))*(x82)*(x84)))+(((IkReal(-0.000144000000000000))*(x82)))+(((IkReal(0.000144000000000000))*(x83)))+(((x83)*(x84)))));
IkReal x85=(cj1)*(cj1);
IkReal x86=((r02)*(r11));
IkReal x87=((r01)*(r12));
IkReal x88=((IkReal(1167.36111111111))*(x85));
dummyeval[0]=((((x86)*(x88)))+(((IkReal(-1.00000000000000))*(x87)*(x88)))+(x86)+(((IkReal(-1.00000000000000))*(x87))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x89=IKcos(j4);
IkReal x90=((cj5)*(r02));
IkReal x91=((npz)*(r01));
IkReal x92=((r11)*(r22));
IkReal x93=((IkReal(0.410000000000000))*(cj1));
IkReal x94=((IkReal(0.0535083907422505))*(cj1));
IkReal x95=((npz)*(r11));
IkReal x96=((IkReal(0.0764178513251892))*(cj1));
IkReal x97=((npy)*(r12));
IkReal x98=((cj5)*(r12));
IkReal x99=((IkReal(0.00492000000000000))*(sj1));
IkReal x100=((r01)*(r22));
IkReal x101=((npy)*(r02));
IkReal x102=((r21)*(x99));
IkReal x103=((IkReal(0.00140550003878603))*(x89));
IkReal x104=((IkReal(0.00200726075876340))*(x89));
IkReal x105=((IkReal(0.168100000000000))*(cj1)*(sj1));
IkReal x106=((cj1)*(x89));
if( IKabs(((gconst49)*(((((IkReal(-1.00000000000000))*(x103)*(x98)))+(((IkReal(-1.00000000000000))*(r11)*(x104)))+(((IkReal(0.0685814092577495))*(r01)*(x106)))+(((IkReal(-1.00000000000000))*(r02)*(r21)*(x105)))+(((x101)*(x93)))+(((IkReal(-1.00000000000000))*(x91)*(x93)))+(((IkReal(-0.00223662003878603))*(x98)))+(((IkReal(0.0120000000000000))*(x95)))+(((x90)*(x96)))+(((IkReal(-0.0120000000000000))*(x97)))+(((IkReal(0.0480212513251892))*(x106)*(x90)))+(((r12)*(x102)))+(((IkReal(-1.00000000000000))*(x92)*(x99)))+(((IkReal(0.00156609924123660))*(r11)))+(((IkReal(-1.00000000000000))*(r01)*(x94)))+(((x100)*(x105))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((((IkReal(-0.0685814092577495))*(r11)*(x106)))+(((r02)*(x102)))+(((IkReal(-1.00000000000000))*(x103)*(x90)))+(((IkReal(-1.00000000000000))*(r01)*(x104)))+(((IkReal(-0.0120000000000000))*(x101)))+(((r11)*(x94)))+(((IkReal(-1.00000000000000))*(x105)*(x92)))+(((IkReal(-0.00223662003878603))*(x90)))+(((IkReal(0.0120000000000000))*(x91)))+(((x93)*(x95)))+(((IkReal(-1.00000000000000))*(x100)*(x99)))+(((IkReal(-0.0480212513251892))*(x106)*(x98)))+(((r12)*(r21)*(x105)))+(((IkReal(-1.00000000000000))*(x93)*(x97)))+(((IkReal(0.00156609924123660))*(r01)))+(((IkReal(-1.00000000000000))*(x96)*(x98))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst49)*(((((IkReal(-1.00000000000000))*(x103)*(x98)))+(((IkReal(-1.00000000000000))*(r11)*(x104)))+(((IkReal(0.0685814092577495))*(r01)*(x106)))+(((IkReal(-1.00000000000000))*(r02)*(r21)*(x105)))+(((x101)*(x93)))+(((IkReal(-1.00000000000000))*(x91)*(x93)))+(((IkReal(-0.00223662003878603))*(x98)))+(((IkReal(0.0120000000000000))*(x95)))+(((x90)*(x96)))+(((IkReal(-0.0120000000000000))*(x97)))+(((IkReal(0.0480212513251892))*(x106)*(x90)))+(((r12)*(x102)))+(((IkReal(-1.00000000000000))*(x92)*(x99)))+(((IkReal(0.00156609924123660))*(r11)))+(((IkReal(-1.00000000000000))*(r01)*(x94)))+(((x100)*(x105)))))), ((gconst49)*(((((IkReal(-0.0685814092577495))*(r11)*(x106)))+(((r02)*(x102)))+(((IkReal(-1.00000000000000))*(x103)*(x90)))+(((IkReal(-1.00000000000000))*(r01)*(x104)))+(((IkReal(-0.0120000000000000))*(x101)))+(((r11)*(x94)))+(((IkReal(-1.00000000000000))*(x105)*(x92)))+(((IkReal(-0.00223662003878603))*(x90)))+(((IkReal(0.0120000000000000))*(x91)))+(((x93)*(x95)))+(((IkReal(-1.00000000000000))*(x100)*(x99)))+(((IkReal(-0.0480212513251892))*(x106)*(x98)))+(((r12)*(r21)*(x105)))+(((IkReal(-1.00000000000000))*(x93)*(x97)))+(((IkReal(0.00156609924123660))*(r01)))+(((IkReal(-1.00000000000000))*(x96)*(x98)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x107=IKcos(j0);
IkReal x108=IKsin(j0);
IkReal x109=IKcos(j4);
IkReal x110=((IkReal(0.410000000000000))*(sj1));
IkReal x111=((IkReal(0.130508270103050))*(r12));
IkReal x112=((IkReal(0.410000000000000))*(cj1));
IkReal x113=((IkReal(0.186385003232169))*(cj5));
IkReal x114=((IkReal(0.186385003232169))*(sj5));
IkReal x115=((IkReal(0.130508270103050))*(r02));
IkReal x116=((IkReal(0.820000000000000))*(cj1));
IkReal x117=((r01)*(x107));
IkReal x118=((r11)*(x107));
IkReal x119=((IkReal(0.0120000000000000))*(x108));
IkReal x120=((py)*(x108));
IkReal x121=((r01)*(x108));
IkReal x122=((r10)*(x108));
IkReal x123=((px)*(x108));
IkReal x124=((IkReal(0.0120000000000000))*(x107));
IkReal x125=((r00)*(x107));
IkReal x126=((r11)*(x108));
IkReal x127=((py)*(x107));
IkReal x128=((px)*(x107));
IkReal x129=((r12)*(x108));
IkReal x130=((IkReal(0.167271729896950))*(x109));
IkReal x131=((r00)*(x108));
IkReal x132=((r02)*(x107));
IkReal x133=((IkReal(0.117125003232169))*(cj5)*(x109));
IkReal x134=((IkReal(0.117125003232169))*(sj5)*(x109));
IkReal x135=((x107)*(x134));
evalcond[0]=((IkReal(0.130508270103050))+(((IkReal(-1.00000000000000))*(x112)*(x132)))+(((IkReal(-1.00000000000000))*(x112)*(x129)))+(npz)+(((r12)*(x124)))+(((IkReal(-1.00000000000000))*(x130)))+(((IkReal(-1.00000000000000))*(r22)*(x110)))+(((IkReal(-1.00000000000000))*(r02)*(x119))));
evalcond[1]=((IkReal(-0.116472222004854))+(((IkReal(0.820000000000000))*(pz)*(sj1)))+(((IkReal(0.0416980980048537))*((x109)*(x109))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0240000000000000))*(x123)))+(((x116)*(x128)))+(((x116)*(x120)))+(((IkReal(-0.0240000000000000))*(x127))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(x110)))+(((IkReal(-1.00000000000000))*(r00)*(x119)))+(((IkReal(-1.00000000000000))*(x112)*(x122)))+(((IkReal(-1.00000000000000))*(x112)*(x125)))+(npx)+(x134)+(x114)+(((r10)*(x124))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x112)*(x117)))+(((IkReal(-1.00000000000000))*(r21)*(x110)))+(((IkReal(-1.00000000000000))*(r01)*(x119)))+(((IkReal(-1.00000000000000))*(x112)*(x126)))+(npy)+(x133)+(x113)+(((IkReal(0.0120000000000000))*(x118))));
evalcond[4]=((IkReal(0.0120000000000000))+(((IkReal(-1.00000000000000))*(x113)*(x121)))+(((r02)*(x108)*(x130)))+(((r10)*(x107)*(x114)))+(((x113)*(x118)))+(x127)+(((IkReal(-1.00000000000000))*(x108)*(x115)))+(((IkReal(-1.00000000000000))*(x114)*(x131)))+(((IkReal(-1.00000000000000))*(x121)*(x133)))+(((IkReal(-1.00000000000000))*(r12)*(x107)*(x130)))+(((IkReal(-1.00000000000000))*(x123)))+(((IkReal(-1.00000000000000))*(x131)*(x134)))+(((r10)*(x135)))+(((x118)*(x133)))+(((x107)*(x111))));
evalcond[5]=((((x117)*(x133)))+(((x114)*(x122)))+(((x114)*(x125)))+(((x113)*(x117)))+(((x122)*(x134)))+(((IkReal(-1.00000000000000))*(x112)))+(((x113)*(x126)))+(x120)+(x128)+(((x125)*(x134)))+(((x108)*(x111)))+(((x126)*(x133)))+(((IkReal(-1.00000000000000))*(x129)*(x130)))+(((IkReal(-1.00000000000000))*(x130)*(x132)))+(((x107)*(x115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x459=IKcos(j4);
IkReal x460=((IkReal(0.410000000000000))*(cj1));
IkReal x461=((npz)*(r10));
IkReal x462=((npx)*(r02));
IkReal x463=((r12)*(sj5));
IkReal x464=((r20)*(sj1));
IkReal x465=((IkReal(0.168100000000000))*(cj1));
IkReal x466=((npx)*(r12));
IkReal x467=((r22)*(sj1));
IkReal x468=((IkReal(0.0535083907422505))*(cj1));
IkReal x469=((IkReal(0.0764178513251892))*(cj1));
IkReal x470=((r02)*(sj5));
IkReal x471=((npz)*(r00));
IkReal x472=((cj1)*(x459));
IkReal x473=((IkReal(0.00200726075876340))*(x459));
IkReal x474=((IkReal(0.00140550003878603))*(x459));
if( IKabs(((gconst48)*(((((IkReal(-0.00223662003878603))*(x463)))+(((IkReal(0.0120000000000000))*(x461)))+(((x469)*(x470)))+(((IkReal(-1.00000000000000))*(r02)*(x464)*(x465)))+(((IkReal(-1.00000000000000))*(x460)*(x471)))+(((IkReal(-0.0120000000000000))*(x466)))+(((IkReal(-1.00000000000000))*(r00)*(x468)))+(((IkReal(0.0480212513251892))*(x470)*(x472)))+(((IkReal(0.0685814092577495))*(r00)*(x472)))+(((r00)*(x465)*(x467)))+(((x460)*(x462)))+(((IkReal(0.00492000000000000))*(r12)*(x464)))+(((IkReal(-1.00000000000000))*(r10)*(x473)))+(((IkReal(0.00156609924123660))*(r10)))+(((IkReal(-1.00000000000000))*(x463)*(x474)))+(((IkReal(-0.00492000000000000))*(r10)*(x467))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-0.0480212513251892))*(x463)*(x472)))+(((IkReal(-1.00000000000000))*(x463)*(x469)))+(((IkReal(-0.0120000000000000))*(x462)))+(((IkReal(0.0120000000000000))*(x471)))+(((IkReal(-1.00000000000000))*(x460)*(x466)))+(((IkReal(-1.00000000000000))*(r00)*(x473)))+(((IkReal(0.00492000000000000))*(r02)*(x464)))+(((IkReal(-1.00000000000000))*(r10)*(x465)*(x467)))+(((x460)*(x461)))+(((r12)*(x464)*(x465)))+(((IkReal(-0.00492000000000000))*(r00)*(x467)))+(((IkReal(-0.00223662003878603))*(x470)))+(((IkReal(-1.00000000000000))*(x470)*(x474)))+(((IkReal(0.00156609924123660))*(r00)))+(((IkReal(-0.0685814092577495))*(r10)*(x472)))+(((r10)*(x468))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst48)*(((((IkReal(-0.00223662003878603))*(x463)))+(((IkReal(0.0120000000000000))*(x461)))+(((x469)*(x470)))+(((IkReal(-1.00000000000000))*(r02)*(x464)*(x465)))+(((IkReal(-1.00000000000000))*(x460)*(x471)))+(((IkReal(-0.0120000000000000))*(x466)))+(((IkReal(-1.00000000000000))*(r00)*(x468)))+(((IkReal(0.0480212513251892))*(x470)*(x472)))+(((IkReal(0.0685814092577495))*(r00)*(x472)))+(((r00)*(x465)*(x467)))+(((x460)*(x462)))+(((IkReal(0.00492000000000000))*(r12)*(x464)))+(((IkReal(-1.00000000000000))*(r10)*(x473)))+(((IkReal(0.00156609924123660))*(r10)))+(((IkReal(-1.00000000000000))*(x463)*(x474)))+(((IkReal(-0.00492000000000000))*(r10)*(x467)))))), ((gconst48)*(((((IkReal(-0.0480212513251892))*(x463)*(x472)))+(((IkReal(-1.00000000000000))*(x463)*(x469)))+(((IkReal(-0.0120000000000000))*(x462)))+(((IkReal(0.0120000000000000))*(x471)))+(((IkReal(-1.00000000000000))*(x460)*(x466)))+(((IkReal(-1.00000000000000))*(r00)*(x473)))+(((IkReal(0.00492000000000000))*(r02)*(x464)))+(((IkReal(-1.00000000000000))*(r10)*(x465)*(x467)))+(((x460)*(x461)))+(((r12)*(x464)*(x465)))+(((IkReal(-0.00492000000000000))*(r00)*(x467)))+(((IkReal(-0.00223662003878603))*(x470)))+(((IkReal(-1.00000000000000))*(x470)*(x474)))+(((IkReal(0.00156609924123660))*(r00)))+(((IkReal(-0.0685814092577495))*(r10)*(x472)))+(((r10)*(x468)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x475=IKcos(j0);
IkReal x476=IKsin(j0);
IkReal x477=IKcos(j4);
IkReal x478=((IkReal(0.410000000000000))*(sj1));
IkReal x479=((IkReal(0.130508270103050))*(r12));
IkReal x480=((IkReal(0.410000000000000))*(cj1));
IkReal x481=((IkReal(0.186385003232169))*(cj5));
IkReal x482=((IkReal(0.186385003232169))*(sj5));
IkReal x483=((IkReal(0.130508270103050))*(r02));
IkReal x484=((IkReal(0.820000000000000))*(cj1));
IkReal x485=((r01)*(x475));
IkReal x486=((r11)*(x475));
IkReal x487=((IkReal(0.0120000000000000))*(x476));
IkReal x488=((py)*(x476));
IkReal x489=((r01)*(x476));
IkReal x490=((r10)*(x476));
IkReal x491=((px)*(x476));
IkReal x492=((IkReal(0.0120000000000000))*(x475));
IkReal x493=((r00)*(x475));
IkReal x494=((r11)*(x476));
IkReal x495=((py)*(x475));
IkReal x496=((px)*(x475));
IkReal x497=((r12)*(x476));
IkReal x498=((IkReal(0.167271729896950))*(x477));
IkReal x499=((r00)*(x476));
IkReal x500=((r02)*(x475));
IkReal x501=((IkReal(0.117125003232169))*(cj5)*(x477));
IkReal x502=((IkReal(0.117125003232169))*(sj5)*(x477));
IkReal x503=((x475)*(x502));
evalcond[0]=((IkReal(0.130508270103050))+(((IkReal(-1.00000000000000))*(x498)))+(npz)+(((IkReal(-1.00000000000000))*(r22)*(x478)))+(((r12)*(x492)))+(((IkReal(-1.00000000000000))*(x480)*(x497)))+(((IkReal(-1.00000000000000))*(x480)*(x500)))+(((IkReal(-1.00000000000000))*(r02)*(x487))));
evalcond[1]=((IkReal(-0.116472222004854))+(((x484)*(x488)))+(((IkReal(0.0240000000000000))*(x491)))+(((IkReal(0.820000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(pp)))+(((x484)*(x496)))+(((IkReal(-0.0240000000000000))*(x495)))+(((IkReal(0.0416980980048537))*((x477)*(x477)))));
evalcond[2]=((npx)+(((IkReal(-1.00000000000000))*(x480)*(x490)))+(((IkReal(-1.00000000000000))*(x480)*(x493)))+(x482)+(((r10)*(x492)))+(x502)+(((IkReal(-1.00000000000000))*(r20)*(x478)))+(((IkReal(-1.00000000000000))*(r00)*(x487))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r21)*(x478)))+(((IkReal(0.0120000000000000))*(x486)))+(npy)+(((IkReal(-1.00000000000000))*(x480)*(x494)))+(x481)+(((IkReal(-1.00000000000000))*(x480)*(x485)))+(x501)+(((IkReal(-1.00000000000000))*(r01)*(x487))));
evalcond[4]=((IkReal(0.0120000000000000))+(((IkReal(-1.00000000000000))*(x489)*(x501)))+(((IkReal(-1.00000000000000))*(x482)*(x499)))+(((IkReal(-1.00000000000000))*(x476)*(x483)))+(((IkReal(-1.00000000000000))*(x499)*(x502)))+(((r10)*(x503)))+(((IkReal(-1.00000000000000))*(r12)*(x475)*(x498)))+(((r10)*(x475)*(x482)))+(((IkReal(-1.00000000000000))*(x481)*(x489)))+(((x481)*(x486)))+(((IkReal(-1.00000000000000))*(x491)))+(((r02)*(x476)*(x498)))+(x495)+(((x475)*(x479)))+(((x486)*(x501))));
evalcond[5]=((((x494)*(x501)))+(((IkReal(-1.00000000000000))*(x480)))+(((x475)*(x483)))+(((IkReal(-1.00000000000000))*(x497)*(x498)))+(((x490)*(x502)))+(((x493)*(x502)))+(((x481)*(x485)))+(((x485)*(x501)))+(x488)+(x496)+(((x481)*(x494)))+(((IkReal(-1.00000000000000))*(x498)*(x500)))+(((x476)*(x479)))+(((x482)*(x493)))+(((x482)*(x490))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x136=((IkReal(0.573576689470092))*(cj5));
IkReal x137=((IkReal(0.573576689470092))*(sj5));
IkReal x138=((IkReal(0.819151867053070))*(cj5));
IkReal x139=((IkReal(1.00000000000000))*(sj0));
IkReal x140=((IkReal(1.00000000000000))*(cj1));
IkReal x141=((IkReal(1.00000000000000))*(sj5));
IkReal x142=((IkReal(0.819151867053070))*(sj5));
IkReal x143=((((cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x141))));
IkReal x144=((((cj5)*(r10)))+(((IkReal(-1.00000000000000))*(r11)*(x141))));
IkReal x145=((((IkReal(-1.00000000000000))*(r01)*(x141)))+(((cj5)*(r00))));
IkReal x146=((((IkReal(-0.819151867053070))*(r22)))+(((r21)*(x136)))+(((r20)*(x137))));
IkReal x147=((((IkReal(-0.819151867053070))*(r12)))+(((r11)*(x136)))+(((r10)*(x137))));
IkReal x148=((((IkReal(-0.819151867053070))*(r02)))+(((r00)*(x137)))+(((r01)*(x136))));
IkReal x149=((((r20)*(x142)))+(((r21)*(x138)))+(((IkReal(0.573576689470092))*(r22))));
IkReal x150=((((r11)*(x138)))+(((r10)*(x142)))+(((IkReal(0.573576689470092))*(r12))));
IkReal x151=((((r00)*(x142)))+(((r01)*(x138)))+(((IkReal(0.573576689470092))*(r02))));
IkReal x152=((((cj0)*(x145)))+(((sj0)*(x144))));
IkReal x153=((((cj0)*(x148)))+(((sj0)*(x147))));
IkReal x154=((((cj0)*(x151)))+(((sj0)*(x150))));
new_r00=((((sj1)*(x143)))+(((cj1)*(x152))));
new_r01=((((IkReal(-1.00000000000000))*(x140)*(x143)))+(((sj1)*(x152))));
new_r02=((((cj0)*(x144)))+(((IkReal(-1.00000000000000))*(x139)*(x145))));
new_r10=((((sj1)*(x146)))+(((cj1)*(x153))));
new_r11=((((IkReal(-1.00000000000000))*(x140)*(x146)))+(((sj1)*(x153))));
new_r12=((((cj0)*(x147)))+(((IkReal(-1.00000000000000))*(x139)*(x148))));
new_r20=((((sj1)*(x149)))+(((cj1)*(x154))));
new_r21=((((IkReal(-1.00000000000000))*(x140)*(x149)))+(((sj1)*(x154))));
new_r22=((((cj0)*(x150)))+(((IkReal(-1.00000000000000))*(x139)*(x151))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(1.22077485289454))*(new_r22));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(571258827.000000))*((new_r12)*(new_r12))))+(((IkReal(571258827.000000))*((new_r02)*(new_r02))))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(((IkReal(1.60000000000000e+17))+(((IkReal(3.26336647425416e+17))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(2.03960404640885))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(((((IkReal(4.86336647425416e+17))*((new_r02)*(new_r02))))+(((IkReal(4.86336647425416e+17))*((new_r12)*(new_r12))))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x155=((IkReal(2.78951364198253e+17))*(cj3));
IkReal x156=((IkReal(4.86336647425416e+17))*(sj3));
if( IKabs(((gconst51)*(((((new_r12)*(x156)))+(((IkReal(-1.00000000000000))*(new_r02)*(x155))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((((IkReal(-1.00000000000000))*(new_r02)*(x156)))+(((IkReal(-1.00000000000000))*(new_r12)*(x155))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst51)*(((((new_r12)*(x156)))+(((IkReal(-1.00000000000000))*(new_r02)*(x155)))))), ((gconst51)*(((((IkReal(-1.00000000000000))*(new_r02)*(x156)))+(((IkReal(-1.00000000000000))*(new_r12)*(x155)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x157=IKsin(j4);
IkReal x158=IKcos(j4);
IkReal x159=((cj3)*(new_r12));
IkReal x160=((IkReal(0.573576689470092))*(cj3));
IkReal x161=((new_r12)*(sj3));
IkReal x162=((IkReal(0.819151867053070))*(new_r22));
IkReal x163=((IkReal(0.819151867053070))*(cj3));
IkReal x164=((IkReal(1.00000000000000))*(x157));
IkReal x165=((new_r02)*(x158));
IkReal x166=((new_r02)*(x157));
IkReal x167=((sj3)*(x158));
IkReal x168=((new_r12)*(x158));
IkReal x169=((IkReal(0.573576689470092))*(x158));
evalcond[0]=((sj3)+(x165)+(((IkReal(-1.00000000000000))*(new_r12)*(x164))));
evalcond[1]=((x168)+(x160)+(x166));
evalcond[2]=((((IkReal(0.819151867053070))*(x168)))+(((IkReal(0.819151867053070))*(x166)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[3]=((((sj3)*(x162)))+(((IkReal(-1.00000000000000))*(x159)*(x164)))+(((IkReal(-1.00000000000000))*(x161)*(x169)))+(((IkReal(-0.573576689470092))*(sj3)*(x166)))+(((cj3)*(x165))));
evalcond[4]=((((new_r00)*(x167)))+(((IkReal(-1.00000000000000))*(new_r20)*(x163)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x164)))+(((new_r00)*(x157)*(x160)))+(((new_r10)*(x158)*(x160))));
evalcond[5]=((((new_r01)*(x167)))+(((IkReal(-1.00000000000000))*(new_r21)*(x163)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)*(x164)))+(((new_r11)*(x158)*(x160)))+(((new_r01)*(x157)*(x160))));
evalcond[6]=((IkReal(1.00000000000000))+(((sj3)*(x165)))+(((IkReal(-1.00000000000000))*(x161)*(x164)))+(((IkReal(-1.00000000000000))*(cj3)*(x162)))+(((x159)*(x169)))+(((x160)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x170=((IkReal(1.00000000000000))*(sj4));
IkReal x171=((new_r02)*(sj4));
IkReal x172=((cj4)*(new_r12));
IkReal x173=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x170))));
IkReal x174=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x170))));
IkReal x175=((IkReal(1.00000000000000))+(((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(x170))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x175;
evalcond[3]=((x171)+(x172));
evalcond[4]=x173;
evalcond[5]=x174;
evalcond[6]=((((IkReal(0.819151867053070))*(x172)))+(((IkReal(0.819151867053070))*(x171)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[7]=((((IkReal(-0.573576689470092))*(x171)))+(((IkReal(-0.573576689470092))*(x172)))+(((IkReal(0.819151867053070))*(new_r22))));
evalcond[8]=x173;
evalcond[9]=x174;
evalcond[10]=x175;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))), ((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x176=IKcos(j2);
IkReal x177=IKsin(j2);
IkReal x178=((cj4)*(new_r11));
IkReal x179=((cj4)*(new_r10));
IkReal x180=((new_r01)*(sj4));
IkReal x181=((new_r00)*(sj4));
IkReal x182=((IkReal(0.573576689470092))*(x176));
IkReal x183=((IkReal(0.819151867053070))*(x177));
IkReal x184=((IkReal(0.573576689470092))*(x177));
IkReal x185=((IkReal(0.819151867053070))*(x176));
IkReal x186=((IkReal(1.00000000000000))*(x176));
IkReal x187=((x182)+(x183));
evalcond[0]=((((IkReal(-1.00000000000000))*(x185)))+(x184)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x187)))+(new_r21));
evalcond[2]=((x177)+(((IkReal(0.819151867053070))*(x179)))+(((IkReal(0.819151867053070))*(x181)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[3]=((x179)+(x187)+(x181));
evalcond[4]=((((IkReal(-1.00000000000000))*(x185)))+(x178)+(x184)+(x180));
evalcond[5]=((((IkReal(-1.00000000000000))*(x186)))+(((IkReal(0.819151867053070))*(x178)))+(((IkReal(0.819151867053070))*(x180)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x186)))+(((IkReal(-0.573576689470092))*(x179)))+(((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-0.573576689470092))*(x181))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x177)))+(((IkReal(-0.573576689470092))*(x178)))+(((IkReal(0.819151867053070))*(new_r21)))+(((IkReal(-0.573576689470092))*(x180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x188=((cj4)*(new_r00));
IkReal x189=((cj4)*(new_r01));
IkReal x190=((cj4)*(new_r02));
IkReal x191=((IkReal(1.00000000000000))*(sj4));
IkReal x192=((new_r02)*(sj4));
IkReal x193=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))+(x190)+(((IkReal(-1.00000000000000))*(new_r12)*(x191))));
evalcond[3]=((x193)+(x192));
evalcond[4]=((x188)+(((IkReal(-1.00000000000000))*(new_r10)*(x191))));
evalcond[5]=((x189)+(((IkReal(-1.00000000000000))*(new_r11)*(x191))));
evalcond[6]=((((IkReal(0.819151867053070))*(x193)))+(((IkReal(0.819151867053070))*(x192)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[7]=((((IkReal(-0.819151867053070))*(new_r22)))+(((IkReal(0.573576689470092))*(x193)))+(((IkReal(0.573576689470092))*(x192))));
evalcond[8]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x188))));
evalcond[9]=((((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x189))));
evalcond[10]=((IkReal(1.00000000000000))+(((new_r12)*(sj4)))+(((IkReal(-1.00000000000000))*(x190))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))), ((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x194=IKsin(j2);
IkReal x195=IKcos(j2);
IkReal x196=((cj4)*(new_r11));
IkReal x197=((cj4)*(new_r10));
IkReal x198=((new_r01)*(sj4));
IkReal x199=((new_r00)*(sj4));
IkReal x200=((IkReal(0.819151867053070))*(x194));
IkReal x201=((IkReal(0.573576689470092))*(x195));
IkReal x202=((IkReal(0.819151867053070))*(x195));
IkReal x203=((IkReal(0.573576689470092))*(x194));
IkReal x204=((IkReal(1.00000000000000))*(x195));
IkReal x205=((x203)+(x202));
evalcond[0]=((x205)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x201)))+(x200)+(new_r21));
evalcond[2]=((x194)+(((IkReal(0.819151867053070))*(x199)))+(((IkReal(0.819151867053070))*(x197)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[3]=((x199)+(x197)+(((IkReal(-1.00000000000000))*(x201)))+(x200));
evalcond[4]=((x198)+(x196)+(((IkReal(-1.00000000000000))*(x205))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x204)))+(((IkReal(0.819151867053070))*(x198)))+(((IkReal(0.819151867053070))*(x196)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[6]=((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(-1.00000000000000))*(x204)))+(((IkReal(0.573576689470092))*(x199)))+(((IkReal(0.573576689470092))*(x197))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-0.819151867053070))*(new_r21)))+(((IkReal(0.573576689470092))*(x198)))+(((IkReal(0.573576689470092))*(x196))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x206=((IkReal(0.573576689470092))*(cj4));
IkReal x207=((IkReal(0.573576689470092))*(sj4));
IkReal x208=((new_r02)*(sj4));
IkReal x209=((cj4)*(new_r12));
IkReal x210=((((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.819151867053070))+(new_r22));
evalcond[2]=x210;
evalcond[3]=((IkReal(0.573576689470092))+(x209)+(x208));
evalcond[4]=((((IkReal(0.819151867053070))*(x208)))+(((IkReal(0.819151867053070))*(x209)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[5]=x210;
evalcond[6]=((((new_r10)*(x206)))+(((new_r00)*(x207)))+(((IkReal(-0.819151867053070))*(new_r20))));
evalcond[7]=((((new_r11)*(x206)))+(((new_r01)*(x207)))+(((IkReal(-0.819151867053070))*(new_r21))));
evalcond[8]=((IkReal(1.00000000000000))+(((new_r02)*(x207)))+(((new_r12)*(x206)))+(((IkReal(-0.819151867053070))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x211=IKsin(j2);
IkReal x212=IKcos(j2);
IkReal x213=((cj4)*(new_r10));
IkReal x214=((cj4)*(new_r11));
IkReal x215=((new_r00)*(sj4));
IkReal x216=((IkReal(1.00000000000000))*(sj4));
IkReal x217=((new_r01)*(sj4));
IkReal x218=((IkReal(1.00000000000000))*(x212));
evalcond[0]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x216)))+(((IkReal(-1.00000000000000))*(x218))));
evalcond[1]=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x216)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[2]=((((IkReal(0.573576689470092))*(x211)))+(new_r20));
evalcond[3]=((new_r21)+(((IkReal(-0.573576689470092))*(x212))));
evalcond[4]=((x211)+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x215)))+(((IkReal(0.819151867053070))*(x213))));
evalcond[5]=((x213)+(x215)+(((IkReal(0.819151867053070))*(x211))));
evalcond[6]=((x214)+(x217)+(((IkReal(-0.819151867053070))*(x212))));
evalcond[7]=((((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x218)))+(((IkReal(0.819151867053070))*(x214)))+(((IkReal(0.819151867053070))*(x217))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x219=((IkReal(0.573576689470092))*(cj4));
IkReal x220=((cj4)*(new_r02));
IkReal x221=((new_r12)*(sj4));
IkReal x222=((IkReal(0.573576689470092))*(sj4));
IkReal x223=((new_r02)*(sj4));
IkReal x224=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.819151867053070))+(new_r22));
evalcond[2]=((x220)+(((IkReal(-1.00000000000000))*(x221))));
evalcond[3]=((IkReal(-0.573576689470092))+(x223)+(x224));
evalcond[4]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x224)))+(((IkReal(0.819151867053070))*(x223))));
evalcond[5]=((x221)+(((IkReal(-1.00000000000000))*(x220))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r10)*(x219)))+(((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(x222))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r01)*(x222)))+(((IkReal(-1.00000000000000))*(new_r11)*(x219)))+(((IkReal(0.819151867053070))*(new_r21))));
evalcond[8]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x219)))+(((IkReal(0.819151867053070))*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r02)*(x222))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x225=IKsin(j2);
IkReal x226=IKcos(j2);
IkReal x227=((IkReal(0.819151867053070))*(cj4));
IkReal x228=((new_r00)*(sj4));
IkReal x229=((IkReal(1.00000000000000))*(sj4));
IkReal x230=((new_r01)*(sj4));
evalcond[0]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x229)))+(x226));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x229)))+(((cj4)*(new_r01)))+(x225));
evalcond[2]=((((IkReal(0.573576689470092))*(x225)))+(new_r20));
evalcond[3]=((new_r21)+(((IkReal(-0.573576689470092))*(x226))));
evalcond[4]=((x225)+(((new_r10)*(x227)))+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x228))));
evalcond[5]=((((cj4)*(new_r10)))+(x228)+(((IkReal(0.819151867053070))*(x225))));
evalcond[6]=((((cj4)*(new_r11)))+(x230)+(((IkReal(-0.819151867053070))*(x226))));
evalcond[7]=((((IkReal(0.819151867053070))*(x230)))+(((new_r11)*(x227)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x226))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x231=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x232=((cj4)*(new_r00));
IkReal x233=((new_r10)*(sj4));
if( IKabs(((IkReal(1.75051999677897e-9))*(x231)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x232)))+(((IkReal(400000000.000000))*(x233))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x231)*(((x232)+(((IkReal(-1.00000000000000))*(x233))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.75051999677897e-9))*(x231)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x232)))+(((IkReal(400000000.000000))*(x233)))))))+IKsqr(((x231)*(((x232)+(((IkReal(-1.00000000000000))*(x233)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(1.75051999677897e-9))*(x231)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x232)))+(((IkReal(400000000.000000))*(x233)))))), ((x231)*(((x232)+(((IkReal(-1.00000000000000))*(x233)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x234=IKsin(j2);
IkReal x235=IKcos(j2);
IkReal x236=((IkReal(0.819151867053070))*(sj3));
IkReal x237=((IkReal(0.819151867053070))*(cj4));
IkReal x238=((cj4)*(new_r01));
IkReal x239=((IkReal(0.573576689470092))*(sj3));
IkReal x240=((new_r00)*(sj4));
IkReal x241=((cj4)*(new_r11));
IkReal x242=((IkReal(1.00000000000000))*(cj3));
IkReal x243=((new_r11)*(sj4));
IkReal x244=((cj4)*(new_r00));
IkReal x245=((new_r01)*(sj4));
IkReal x246=((cj4)*(new_r10));
IkReal x247=((IkReal(1.00000000000000))*(x235));
IkReal x248=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((x244)+(((IkReal(-1.00000000000000))*(x235)*(x242)))+(((IkReal(-1.00000000000000))*(x248))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x243)))+(((IkReal(-1.00000000000000))*(x234)*(x242)))+(x238));
evalcond[2]=((((IkReal(0.573576689470092))*(x234)))+(((IkReal(-1.00000000000000))*(x235)*(x236)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x235)))+(new_r21)+(((IkReal(-1.00000000000000))*(x234)*(x236))));
evalcond[4]=((((new_r10)*(x237)))+(((IkReal(0.819151867053070))*(x240)))+(x234)+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((x240)+(x246)+(((x235)*(x239)))+(((IkReal(0.819151867053070))*(x234))));
evalcond[6]=((((x234)*(x239)))+(((IkReal(-0.819151867053070))*(x235)))+(x241)+(x245));
evalcond[7]=((((IkReal(0.819151867053070))*(x245)))+(((new_r11)*(x237)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x247))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x242)))+(((IkReal(-1.00000000000000))*(x247)))+(((IkReal(-1.00000000000000))*(x239)*(x246)))+(((IkReal(-1.00000000000000))*(x239)*(x240)))+(((cj3)*(x244)))+(((new_r20)*(x236))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x242)*(x243)))+(((cj3)*(x238)))+(((IkReal(-1.00000000000000))*(x234)))+(((IkReal(-1.00000000000000))*(x239)*(x245)))+(((IkReal(-1.00000000000000))*(x239)*(x241)))+(((new_r21)*(x236))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x249=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x250=((cj4)*(new_r00));
IkReal x251=((IkReal(571258827.000000))*(sj3));
IkReal x252=((new_r10)*(sj4));
if( IKabs(((IkReal(2.50000000000000e-9))*(x249)*(((((IkReal(-1.00000000000000))*(x251)*(x252)))+(((x250)*(x251)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x249)*(((x250)+(((IkReal(-1.00000000000000))*(x252))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(2.50000000000000e-9))*(x249)*(((((IkReal(-1.00000000000000))*(x251)*(x252)))+(((x250)*(x251)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))))))+IKsqr(((x249)*(((x250)+(((IkReal(-1.00000000000000))*(x252)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(2.50000000000000e-9))*(x249)*(((((IkReal(-1.00000000000000))*(x251)*(x252)))+(((x250)*(x251)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))))), ((x249)*(((x250)+(((IkReal(-1.00000000000000))*(x252)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x253=IKsin(j2);
IkReal x254=IKcos(j2);
IkReal x255=((IkReal(0.819151867053070))*(sj3));
IkReal x256=((IkReal(0.819151867053070))*(cj4));
IkReal x257=((cj4)*(new_r01));
IkReal x258=((IkReal(0.573576689470092))*(sj3));
IkReal x259=((new_r00)*(sj4));
IkReal x260=((cj4)*(new_r11));
IkReal x261=((IkReal(1.00000000000000))*(cj3));
IkReal x262=((new_r11)*(sj4));
IkReal x263=((cj4)*(new_r00));
IkReal x264=((new_r01)*(sj4));
IkReal x265=((cj4)*(new_r10));
IkReal x266=((IkReal(1.00000000000000))*(x254));
IkReal x267=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((x263)+(((IkReal(-1.00000000000000))*(x267)))+(((IkReal(-1.00000000000000))*(x254)*(x261))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(x253)*(x261)))+(x257));
evalcond[2]=((((IkReal(-1.00000000000000))*(x254)*(x255)))+(((IkReal(0.573576689470092))*(x253)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x254)))+(new_r21)+(((IkReal(-1.00000000000000))*(x253)*(x255))));
evalcond[4]=((x253)+(((new_r10)*(x256)))+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x259))));
evalcond[5]=((x259)+(x265)+(((x254)*(x258)))+(((IkReal(0.819151867053070))*(x253))));
evalcond[6]=((x264)+(x260)+(((x253)*(x258)))+(((IkReal(-0.819151867053070))*(x254))));
evalcond[7]=((((IkReal(0.819151867053070))*(x264)))+(((new_r11)*(x256)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x266))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x261)))+(((IkReal(-1.00000000000000))*(x258)*(x265)))+(((new_r20)*(x255)))+(((IkReal(-1.00000000000000))*(x266)))+(((cj3)*(x263)))+(((IkReal(-1.00000000000000))*(x258)*(x259))));
evalcond[9]=((((cj3)*(x257)))+(((IkReal(-1.00000000000000))*(x258)*(x264)))+(((IkReal(-1.00000000000000))*(x258)*(x260)))+(((new_r21)*(x255)))+(((IkReal(-1.00000000000000))*(x261)*(x262)))+(((IkReal(-1.00000000000000))*(x253))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x268=((IkReal(1.00000000000000))*(sj4));
if( IKabs(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x268))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x268))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x268)))))), ((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x268)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x269=IKsin(j2);
IkReal x270=IKcos(j2);
IkReal x271=((IkReal(0.819151867053070))*(sj3));
IkReal x272=((IkReal(0.819151867053070))*(cj4));
IkReal x273=((cj4)*(new_r01));
IkReal x274=((IkReal(0.573576689470092))*(sj3));
IkReal x275=((new_r00)*(sj4));
IkReal x276=((cj4)*(new_r11));
IkReal x277=((IkReal(1.00000000000000))*(cj3));
IkReal x278=((new_r11)*(sj4));
IkReal x279=((cj4)*(new_r00));
IkReal x280=((new_r01)*(sj4));
IkReal x281=((cj4)*(new_r10));
IkReal x282=((IkReal(1.00000000000000))*(x270));
IkReal x283=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((x279)+(((IkReal(-1.00000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(x270)*(x277))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x278)))+(((IkReal(-1.00000000000000))*(x269)*(x277)))+(x273));
evalcond[2]=((((IkReal(0.573576689470092))*(x269)))+(((IkReal(-1.00000000000000))*(x270)*(x271)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x270)))+(((IkReal(-1.00000000000000))*(x269)*(x271)))+(new_r21));
evalcond[4]=((((IkReal(0.819151867053070))*(x275)))+(x269)+(((IkReal(0.573576689470092))*(new_r20)))+(((new_r10)*(x272))));
evalcond[5]=((((IkReal(0.819151867053070))*(x269)))+(((x270)*(x274)))+(x275)+(x281));
evalcond[6]=((((IkReal(-0.819151867053070))*(x270)))+(x276)+(x280)+(((x269)*(x274))));
evalcond[7]=((((IkReal(0.819151867053070))*(x280)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x282)))+(((new_r11)*(x272))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x274)*(x275)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x277)))+(((new_r20)*(x271)))+(((IkReal(-1.00000000000000))*(x282)))+(((cj3)*(x279)))+(((IkReal(-1.00000000000000))*(x274)*(x281))));
evalcond[9]=((((new_r21)*(x271)))+(((IkReal(-1.00000000000000))*(x274)*(x276)))+(((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x277)*(x278)))+(((cj3)*(x273)))+(((IkReal(-1.00000000000000))*(x274)*(x280))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x284=((IkReal(3.98383572754860e+17))*(sj3));
if( IKabs(((gconst50)*(((((new_r21)*(x284)))+(((IkReal(-2.78951364198253e+17))*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(2.78951364198253e+17))*(new_r21)))+(((new_r20)*(x284))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst50)*(((((new_r21)*(x284)))+(((IkReal(-2.78951364198253e+17))*(new_r20)))))), ((gconst50)*(((((IkReal(2.78951364198253e+17))*(new_r21)))+(((new_r20)*(x284)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x285=IKcos(j2);
IkReal x286=IKsin(j2);
IkReal x287=((IkReal(0.819151867053070))*(sj3));
evalcond[0]=((((IkReal(0.573576689470092))*(x286)))+(((IkReal(-1.00000000000000))*(x285)*(x287)))+(new_r20));
evalcond[1]=((((IkReal(-0.573576689470092))*(x285)))+(new_r21)+(((IkReal(-1.00000000000000))*(x286)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x288=((cj3)*(sj2));
if( IKabs(((gconst55)*(((((new_r01)*(sj3)))+(((new_r02)*(x288))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(((((new_r11)*(sj3)))+(((new_r12)*(x288))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst55)*(((((new_r01)*(sj3)))+(((new_r02)*(x288)))))), ((gconst55)*(((((new_r11)*(sj3)))+(((new_r12)*(x288)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[15];
IkReal x289=IKsin(j4);
IkReal x290=IKcos(j4);
IkReal x291=((IkReal(1.00000000000000))*(cj2));
IkReal x292=((IkReal(0.819151867053070))*(sj3));
IkReal x293=((new_r11)*(sj3));
IkReal x294=((IkReal(0.573576689470092))*(sj3));
IkReal x295=((IkReal(0.573576689470092))*(cj3));
IkReal x296=((IkReal(1.00000000000000))*(cj3));
IkReal x297=((IkReal(0.819151867053070))*(cj3));
IkReal x298=((new_r10)*(x290));
IkReal x299=((IkReal(1.00000000000000))*(x289));
IkReal x300=((new_r02)*(x290));
IkReal x301=((cj3)*(x290));
IkReal x302=((new_r02)*(x289));
IkReal x303=((new_r11)*(x290));
IkReal x304=((new_r00)*(x289));
IkReal x305=((new_r01)*(x289));
IkReal x306=((new_r12)*(x290));
IkReal x307=((new_r01)*(x290));
IkReal x308=((new_r00)*(x290));
evalcond[0]=((sj3)+(((IkReal(-1.00000000000000))*(new_r12)*(x299)))+(x300));
evalcond[1]=((x306)+(x302)+(x295));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x299)))+(x308)+(((IkReal(-1.00000000000000))*(cj3)*(x291))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x299)))+(x307)+(((IkReal(-1.00000000000000))*(sj2)*(x296))));
evalcond[4]=((((IkReal(0.819151867053070))*(x302)))+(((IkReal(0.819151867053070))*(x306)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[5]=((sj2)+(((IkReal(0.819151867053070))*(x304)))+(((IkReal(0.819151867053070))*(x298)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[6]=((((cj2)*(x294)))+(((IkReal(0.819151867053070))*(sj2)))+(x304)+(x298));
evalcond[7]=((((IkReal(-0.819151867053070))*(cj2)))+(x305)+(x303)+(((sj2)*(x294))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x291)))+(((IkReal(0.819151867053070))*(x303)))+(((IkReal(0.819151867053070))*(x305)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x294)*(x306)))+(((IkReal(-1.00000000000000))*(x294)*(x302)))+(((new_r22)*(x292)))+(((cj3)*(x300)))+(((IkReal(-1.00000000000000))*(new_r12)*(x289)*(x296))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x299)))+(((IkReal(-1.00000000000000))*(new_r20)*(x297)))+(((sj3)*(x308)))+(((x295)*(x304)))+(((x295)*(x298))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x297)))+(((sj3)*(x307)))+(((IkReal(-1.00000000000000))*(x293)*(x299)))+(((x295)*(x305)))+(((x295)*(x303))));
evalcond[12]=((IkReal(1.00000000000000))+(((sj3)*(x300)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj3)*(x299)))+(((x295)*(x302)))+(((x295)*(x306)))+(((IkReal(-1.00000000000000))*(new_r22)*(x297))));
evalcond[13]=((((new_r00)*(x301)))+(((new_r20)*(x292)))+(((IkReal(-1.00000000000000))*(x294)*(x304)))+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-1.00000000000000))*(x294)*(x298)))+(((IkReal(-1.00000000000000))*(new_r10)*(x289)*(x296))));
evalcond[14]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r01)*(x301)))+(((IkReal(-1.00000000000000))*(x294)*(x305)))+(((new_r21)*(x292)))+(((IkReal(-0.573576689470092))*(x290)*(x293)))+(((IkReal(-1.00000000000000))*(new_r11)*(x289)*(x296))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x309=((cj2)*(cj3));
if( IKabs(((gconst54)*(((((new_r00)*(sj3)))+(((new_r02)*(x309))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(((((new_r10)*(sj3)))+(((new_r12)*(x309))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst54)*(((((new_r00)*(sj3)))+(((new_r02)*(x309)))))), ((gconst54)*(((((new_r10)*(sj3)))+(((new_r12)*(x309)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[15];
IkReal x310=IKsin(j4);
IkReal x311=IKcos(j4);
IkReal x312=((IkReal(1.00000000000000))*(cj2));
IkReal x313=((IkReal(0.819151867053070))*(sj3));
IkReal x314=((new_r11)*(sj3));
IkReal x315=((IkReal(0.573576689470092))*(sj3));
IkReal x316=((IkReal(0.573576689470092))*(cj3));
IkReal x317=((IkReal(1.00000000000000))*(cj3));
IkReal x318=((IkReal(0.819151867053070))*(cj3));
IkReal x319=((new_r10)*(x311));
IkReal x320=((IkReal(1.00000000000000))*(x310));
IkReal x321=((new_r02)*(x311));
IkReal x322=((cj3)*(x311));
IkReal x323=((new_r02)*(x310));
IkReal x324=((new_r11)*(x311));
IkReal x325=((new_r00)*(x310));
IkReal x326=((new_r01)*(x310));
IkReal x327=((new_r12)*(x311));
IkReal x328=((new_r01)*(x311));
IkReal x329=((new_r00)*(x311));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x320)))+(sj3)+(x321));
evalcond[1]=((x327)+(x323)+(x316));
evalcond[2]=((x329)+(((IkReal(-1.00000000000000))*(new_r10)*(x320)))+(((IkReal(-1.00000000000000))*(cj3)*(x312))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj2)*(x317)))+(x328)+(((IkReal(-1.00000000000000))*(new_r11)*(x320))));
evalcond[4]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x327)))+(((IkReal(0.819151867053070))*(x323))));
evalcond[5]=((sj2)+(((IkReal(0.819151867053070))*(x319)))+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x325))));
evalcond[6]=((((IkReal(0.819151867053070))*(sj2)))+(x325)+(x319)+(((cj2)*(x315))));
evalcond[7]=((((IkReal(-0.819151867053070))*(cj2)))+(x324)+(x326)+(((sj2)*(x315))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x312)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(0.819151867053070))*(x324)))+(((IkReal(0.819151867053070))*(x326))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x315)*(x323)))+(((IkReal(-1.00000000000000))*(x315)*(x327)))+(((new_r22)*(x313)))+(((IkReal(-1.00000000000000))*(new_r12)*(x310)*(x317)))+(((cj3)*(x321))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x318)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x320)))+(((sj3)*(x329)))+(((x316)*(x325)))+(((x316)*(x319))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x318)))+(((IkReal(-1.00000000000000))*(x314)*(x320)))+(((sj3)*(x328)))+(((x316)*(x326)))+(((x316)*(x324))));
evalcond[12]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x318)))+(((sj3)*(x321)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj3)*(x320)))+(((x316)*(x323)))+(((x316)*(x327))));
evalcond[13]=((((new_r00)*(x322)))+(((new_r20)*(x313)))+(((IkReal(-1.00000000000000))*(x315)*(x325)))+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(new_r10)*(x310)*(x317)))+(((IkReal(-1.00000000000000))*(x315)*(x319))));
evalcond[14]=((((new_r01)*(x322)))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x315)*(x326)))+(((IkReal(-1.00000000000000))*(new_r11)*(x310)*(x317)))+(((IkReal(-0.573576689470092))*(x311)*(x314)))+(((new_r21)*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x330=((IkReal(571258827.000000))*(sj3));
IkReal x331=((IkReal(400000000.000000))*(new_r22));
if( IKabs(((gconst52)*(((((new_r12)*(x330)))+(((IkReal(-1.00000000000000))*(new_r02)*(x331))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((((IkReal(-1.00000000000000))*(new_r12)*(x331)))+(((IkReal(-1.00000000000000))*(new_r02)*(x330))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst52)*(((((new_r12)*(x330)))+(((IkReal(-1.00000000000000))*(new_r02)*(x331)))))), ((gconst52)*(((((IkReal(-1.00000000000000))*(new_r12)*(x331)))+(((IkReal(-1.00000000000000))*(new_r02)*(x330)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x332=IKsin(j4);
IkReal x333=IKcos(j4);
IkReal x334=((cj3)*(new_r12));
IkReal x335=((IkReal(0.573576689470092))*(cj3));
IkReal x336=((new_r12)*(sj3));
IkReal x337=((IkReal(0.819151867053070))*(new_r22));
IkReal x338=((IkReal(0.819151867053070))*(cj3));
IkReal x339=((IkReal(1.00000000000000))*(x332));
IkReal x340=((new_r02)*(x333));
IkReal x341=((new_r02)*(x332));
IkReal x342=((sj3)*(x333));
IkReal x343=((new_r12)*(x333));
IkReal x344=((IkReal(0.573576689470092))*(x333));
evalcond[0]=((sj3)+(x340)+(((IkReal(-1.00000000000000))*(new_r12)*(x339))));
evalcond[1]=((x335)+(x343)+(x341));
evalcond[2]=((((IkReal(0.819151867053070))*(x343)))+(((IkReal(0.819151867053070))*(x341)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[3]=((((sj3)*(x337)))+(((IkReal(-1.00000000000000))*(x336)*(x344)))+(((IkReal(-0.573576689470092))*(sj3)*(x341)))+(((IkReal(-1.00000000000000))*(x334)*(x339)))+(((cj3)*(x340))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x339)))+(((IkReal(-1.00000000000000))*(new_r20)*(x338)))+(((new_r10)*(x333)*(x335)))+(((new_r00)*(x342)))+(((new_r00)*(x332)*(x335))));
evalcond[5]=((((new_r01)*(x332)*(x335)))+(((IkReal(-1.00000000000000))*(new_r21)*(x338)))+(((new_r01)*(x342)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)*(x339)))+(((new_r11)*(x333)*(x335))));
evalcond[6]=((IkReal(1.00000000000000))+(((x335)*(x341)))+(((sj3)*(x340)))+(((IkReal(-1.00000000000000))*(cj3)*(x337)))+(((IkReal(-1.00000000000000))*(x336)*(x339)))+(((x334)*(x344))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x345=((IkReal(1.00000000000000))*(sj4));
IkReal x346=((new_r02)*(sj4));
IkReal x347=((cj4)*(new_r12));
IkReal x348=((((IkReal(-1.00000000000000))*(new_r10)*(x345)))+(((cj4)*(new_r00))));
IkReal x349=((((IkReal(-1.00000000000000))*(new_r11)*(x345)))+(((cj4)*(new_r01))));
IkReal x350=((IkReal(1.00000000000000))+(((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(x345))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x350;
evalcond[3]=((x346)+(x347));
evalcond[4]=x348;
evalcond[5]=x349;
evalcond[6]=((((IkReal(0.819151867053070))*(x347)))+(((IkReal(0.819151867053070))*(x346)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[7]=((((IkReal(-0.573576689470092))*(x347)))+(((IkReal(-0.573576689470092))*(x346)))+(((IkReal(0.819151867053070))*(new_r22))));
evalcond[8]=x348;
evalcond[9]=x349;
evalcond[10]=x350;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))), ((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x351=IKcos(j2);
IkReal x352=IKsin(j2);
IkReal x353=((cj4)*(new_r11));
IkReal x354=((cj4)*(new_r10));
IkReal x355=((new_r01)*(sj4));
IkReal x356=((new_r00)*(sj4));
IkReal x357=((IkReal(0.573576689470092))*(x351));
IkReal x358=((IkReal(0.819151867053070))*(x352));
IkReal x359=((IkReal(0.573576689470092))*(x352));
IkReal x360=((IkReal(0.819151867053070))*(x351));
IkReal x361=((IkReal(1.00000000000000))*(x351));
IkReal x362=((x357)+(x358));
evalcond[0]=((((IkReal(-1.00000000000000))*(x360)))+(x359)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x362)))+(new_r21));
evalcond[2]=((x352)+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x354)))+(((IkReal(0.819151867053070))*(x356))));
evalcond[3]=((x354)+(x356)+(x362));
evalcond[4]=((((IkReal(-1.00000000000000))*(x360)))+(x353)+(x355)+(x359));
evalcond[5]=((((IkReal(-1.00000000000000))*(x361)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(0.819151867053070))*(x355)))+(((IkReal(0.819151867053070))*(x353))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x361)))+(((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-0.573576689470092))*(x354)))+(((IkReal(-0.573576689470092))*(x356))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x352)))+(((IkReal(0.819151867053070))*(new_r21)))+(((IkReal(-0.573576689470092))*(x355)))+(((IkReal(-0.573576689470092))*(x353))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x363=((cj4)*(new_r00));
IkReal x364=((cj4)*(new_r01));
IkReal x365=((cj4)*(new_r02));
IkReal x366=((IkReal(1.00000000000000))*(sj4));
IkReal x367=((new_r02)*(sj4));
IkReal x368=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x366)))+(x365));
evalcond[3]=((x368)+(x367));
evalcond[4]=((x363)+(((IkReal(-1.00000000000000))*(new_r10)*(x366))));
evalcond[5]=((x364)+(((IkReal(-1.00000000000000))*(new_r11)*(x366))));
evalcond[6]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x368)))+(((IkReal(0.819151867053070))*(x367))));
evalcond[7]=((((IkReal(-0.819151867053070))*(new_r22)))+(((IkReal(0.573576689470092))*(x367)))+(((IkReal(0.573576689470092))*(x368))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x363)))+(((new_r10)*(sj4))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x364)))+(((new_r11)*(sj4))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x365)))+(((new_r12)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))), ((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x369=IKsin(j2);
IkReal x370=IKcos(j2);
IkReal x371=((cj4)*(new_r11));
IkReal x372=((cj4)*(new_r10));
IkReal x373=((new_r01)*(sj4));
IkReal x374=((new_r00)*(sj4));
IkReal x375=((IkReal(0.819151867053070))*(x369));
IkReal x376=((IkReal(0.573576689470092))*(x370));
IkReal x377=((IkReal(0.819151867053070))*(x370));
IkReal x378=((IkReal(0.573576689470092))*(x369));
IkReal x379=((IkReal(1.00000000000000))*(x370));
IkReal x380=((x378)+(x377));
evalcond[0]=((x380)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x376)))+(x375)+(new_r21));
evalcond[2]=((x369)+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x372)))+(((IkReal(0.819151867053070))*(x374))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x376)))+(x375)+(x374)+(x372));
evalcond[4]=((x373)+(x371)+(((IkReal(-1.00000000000000))*(x380))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x379)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(0.819151867053070))*(x373)))+(((IkReal(0.819151867053070))*(x371))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x379)))+(((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(x374)))+(((IkReal(0.573576689470092))*(x372))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x369)))+(((IkReal(-0.819151867053070))*(new_r21)))+(((IkReal(0.573576689470092))*(x371)))+(((IkReal(0.573576689470092))*(x373))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x381=((IkReal(0.573576689470092))*(cj4));
IkReal x382=((IkReal(0.573576689470092))*(sj4));
IkReal x383=((new_r02)*(sj4));
IkReal x384=((cj4)*(new_r12));
IkReal x385=((((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.819151867053070))+(new_r22));
evalcond[2]=x385;
evalcond[3]=((IkReal(0.573576689470092))+(x384)+(x383));
evalcond[4]=((((IkReal(0.819151867053070))*(x384)))+(((IkReal(0.819151867053070))*(x383)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[5]=x385;
evalcond[6]=((((new_r00)*(x382)))+(((IkReal(-0.819151867053070))*(new_r20)))+(((new_r10)*(x381))));
evalcond[7]=((((new_r01)*(x382)))+(((IkReal(-0.819151867053070))*(new_r21)))+(((new_r11)*(x381))));
evalcond[8]=((IkReal(1.00000000000000))+(((new_r02)*(x382)))+(((new_r12)*(x381)))+(((IkReal(-0.819151867053070))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x386=IKsin(j2);
IkReal x387=IKcos(j2);
IkReal x388=((cj4)*(new_r10));
IkReal x389=((cj4)*(new_r11));
IkReal x390=((new_r00)*(sj4));
IkReal x391=((IkReal(1.00000000000000))*(sj4));
IkReal x392=((new_r01)*(sj4));
IkReal x393=((IkReal(1.00000000000000))*(x387));
evalcond[0]=((((IkReal(-1.00000000000000))*(x393)))+(((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x391))));
evalcond[1]=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(x386)))+(((IkReal(-1.00000000000000))*(new_r11)*(x391))));
evalcond[2]=((new_r20)+(((IkReal(0.573576689470092))*(x386))));
evalcond[3]=((((IkReal(-0.573576689470092))*(x387)))+(new_r21));
evalcond[4]=((((IkReal(0.819151867053070))*(x390)))+(x386)+(((IkReal(0.819151867053070))*(x388)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((x388)+(x390)+(((IkReal(0.819151867053070))*(x386))));
evalcond[6]=((x389)+(x392)+(((IkReal(-0.819151867053070))*(x387))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x393)))+(((IkReal(0.819151867053070))*(x392)))+(((IkReal(0.819151867053070))*(x389)))+(((IkReal(0.573576689470092))*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x394=((IkReal(0.573576689470092))*(cj4));
IkReal x395=((cj4)*(new_r02));
IkReal x396=((new_r12)*(sj4));
IkReal x397=((IkReal(0.573576689470092))*(sj4));
IkReal x398=((new_r02)*(sj4));
IkReal x399=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.819151867053070))+(new_r22));
evalcond[2]=((((IkReal(-1.00000000000000))*(x396)))+(x395));
evalcond[3]=((IkReal(-0.573576689470092))+(x399)+(x398));
evalcond[4]=((((IkReal(0.819151867053070))*(x399)))+(((IkReal(0.819151867053070))*(x398)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x395)))+(x396));
evalcond[6]=((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x394)))+(((IkReal(-1.00000000000000))*(new_r00)*(x397))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r01)*(x397)))+(((IkReal(0.819151867053070))*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x394))));
evalcond[8]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x394)))+(((IkReal(0.819151867053070))*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r02)*(x397))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x400=IKsin(j2);
IkReal x401=IKcos(j2);
IkReal x402=((IkReal(0.819151867053070))*(cj4));
IkReal x403=((new_r00)*(sj4));
IkReal x404=((IkReal(1.00000000000000))*(sj4));
IkReal x405=((new_r01)*(sj4));
evalcond[0]=((((cj4)*(new_r00)))+(x401)+(((IkReal(-1.00000000000000))*(new_r10)*(x404))));
evalcond[1]=((((cj4)*(new_r01)))+(x400)+(((IkReal(-1.00000000000000))*(new_r11)*(x404))));
evalcond[2]=((((IkReal(0.573576689470092))*(x400)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x401)))+(new_r21));
evalcond[4]=((x400)+(((new_r10)*(x402)))+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x403))));
evalcond[5]=((((cj4)*(new_r10)))+(x403)+(((IkReal(0.819151867053070))*(x400))));
evalcond[6]=((((cj4)*(new_r11)))+(((IkReal(-0.819151867053070))*(x401)))+(x405));
evalcond[7]=((((IkReal(0.573576689470092))*(new_r21)))+(((new_r11)*(x402)))+(((IkReal(0.819151867053070))*(x405)))+(((IkReal(-1.00000000000000))*(x401))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x406=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x407=((cj4)*(new_r00));
IkReal x408=((new_r10)*(sj4));
if( IKabs(((IkReal(1.75051999677897e-9))*(x406)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x407)))+(((IkReal(400000000.000000))*(x408))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x406)*(((x407)+(((IkReal(-1.00000000000000))*(x408))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.75051999677897e-9))*(x406)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x407)))+(((IkReal(400000000.000000))*(x408)))))))+IKsqr(((x406)*(((x407)+(((IkReal(-1.00000000000000))*(x408)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(1.75051999677897e-9))*(x406)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x407)))+(((IkReal(400000000.000000))*(x408)))))), ((x406)*(((x407)+(((IkReal(-1.00000000000000))*(x408)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x409=IKsin(j2);
IkReal x410=IKcos(j2);
IkReal x411=((IkReal(0.819151867053070))*(sj3));
IkReal x412=((IkReal(0.819151867053070))*(cj4));
IkReal x413=((cj4)*(new_r01));
IkReal x414=((IkReal(0.573576689470092))*(sj3));
IkReal x415=((new_r00)*(sj4));
IkReal x416=((cj4)*(new_r11));
IkReal x417=((IkReal(1.00000000000000))*(cj3));
IkReal x418=((new_r11)*(sj4));
IkReal x419=((cj4)*(new_r00));
IkReal x420=((new_r01)*(sj4));
IkReal x421=((cj4)*(new_r10));
IkReal x422=((IkReal(1.00000000000000))*(x410));
IkReal x423=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x423)))+(x419)+(((IkReal(-1.00000000000000))*(x410)*(x417))));
evalcond[1]=((x413)+(((IkReal(-1.00000000000000))*(x409)*(x417)))+(((IkReal(-1.00000000000000))*(x418))));
evalcond[2]=((((IkReal(0.573576689470092))*(x409)))+(((IkReal(-1.00000000000000))*(x410)*(x411)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x410)))+(new_r21)+(((IkReal(-1.00000000000000))*(x409)*(x411))));
evalcond[4]=((x409)+(((IkReal(0.819151867053070))*(x415)))+(((IkReal(0.573576689470092))*(new_r20)))+(((new_r10)*(x412))));
evalcond[5]=((((x410)*(x414)))+(x415)+(x421)+(((IkReal(0.819151867053070))*(x409))));
evalcond[6]=((((IkReal(-0.819151867053070))*(x410)))+(((x409)*(x414)))+(x416)+(x420));
evalcond[7]=((((IkReal(-1.00000000000000))*(x422)))+(((IkReal(0.819151867053070))*(x420)))+(((new_r11)*(x412)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x422)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x417)))+(((new_r20)*(x411)))+(((IkReal(-1.00000000000000))*(x414)*(x421)))+(((IkReal(-1.00000000000000))*(x414)*(x415)))+(((cj3)*(x419))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x417)*(x418)))+(((IkReal(-1.00000000000000))*(x414)*(x420)))+(((new_r21)*(x411)))+(((IkReal(-1.00000000000000))*(x414)*(x416)))+(((IkReal(-1.00000000000000))*(x409)))+(((cj3)*(x413))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x424=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x425=((cj4)*(new_r00));
IkReal x426=((IkReal(571258827.000000))*(sj3));
IkReal x427=((new_r10)*(sj4));
if( IKabs(((IkReal(2.50000000000000e-9))*(x424)*(((((x425)*(x426)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))+(((IkReal(-1.00000000000000))*(x426)*(x427))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x424)*(((((IkReal(-1.00000000000000))*(x427)))+(x425))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(2.50000000000000e-9))*(x424)*(((((x425)*(x426)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))))))+IKsqr(((x424)*(((((IkReal(-1.00000000000000))*(x427)))+(x425)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(2.50000000000000e-9))*(x424)*(((((x425)*(x426)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))))), ((x424)*(((((IkReal(-1.00000000000000))*(x427)))+(x425)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x428=IKsin(j2);
IkReal x429=IKcos(j2);
IkReal x430=((IkReal(0.819151867053070))*(sj3));
IkReal x431=((IkReal(0.819151867053070))*(cj4));
IkReal x432=((cj4)*(new_r01));
IkReal x433=((IkReal(0.573576689470092))*(sj3));
IkReal x434=((new_r00)*(sj4));
IkReal x435=((cj4)*(new_r11));
IkReal x436=((IkReal(1.00000000000000))*(cj3));
IkReal x437=((new_r11)*(sj4));
IkReal x438=((cj4)*(new_r00));
IkReal x439=((new_r01)*(sj4));
IkReal x440=((cj4)*(new_r10));
IkReal x441=((IkReal(1.00000000000000))*(x429));
IkReal x442=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x442)))+(((IkReal(-1.00000000000000))*(x429)*(x436)))+(x438));
evalcond[1]=((((IkReal(-1.00000000000000))*(x437)))+(x432)+(((IkReal(-1.00000000000000))*(x428)*(x436))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x429)*(x430)))+(((IkReal(0.573576689470092))*(x428)))+(new_r20));
evalcond[3]=((new_r21)+(((IkReal(-1.00000000000000))*(x428)*(x430)))+(((IkReal(-0.573576689470092))*(x429))));
evalcond[4]=((((new_r10)*(x431)))+(x428)+(((IkReal(0.819151867053070))*(x434)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((((x429)*(x433)))+(((IkReal(0.819151867053070))*(x428)))+(x434)+(x440));
evalcond[6]=((((x428)*(x433)))+(x439)+(x435)+(((IkReal(-0.819151867053070))*(x429))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x441)))+(((new_r11)*(x431)))+(((IkReal(0.819151867053070))*(x439)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x441)))+(((IkReal(-1.00000000000000))*(x433)*(x434)))+(((IkReal(-1.00000000000000))*(x433)*(x440)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x436)))+(((new_r20)*(x430)))+(((cj3)*(x438))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x428)))+(((IkReal(-1.00000000000000))*(x433)*(x435)))+(((IkReal(-1.00000000000000))*(x433)*(x439)))+(((new_r21)*(x430)))+(((IkReal(-1.00000000000000))*(x436)*(x437)))+(((cj3)*(x432))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x443=((IkReal(1.00000000000000))*(sj4));
if( IKabs(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x443))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x443))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x443)))))), ((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x443)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x444=IKsin(j2);
IkReal x445=IKcos(j2);
IkReal x446=((IkReal(0.819151867053070))*(sj3));
IkReal x447=((IkReal(0.819151867053070))*(cj4));
IkReal x448=((cj4)*(new_r01));
IkReal x449=((IkReal(0.573576689470092))*(sj3));
IkReal x450=((new_r00)*(sj4));
IkReal x451=((cj4)*(new_r11));
IkReal x452=((IkReal(1.00000000000000))*(cj3));
IkReal x453=((new_r11)*(sj4));
IkReal x454=((cj4)*(new_r00));
IkReal x455=((new_r01)*(sj4));
IkReal x456=((cj4)*(new_r10));
IkReal x457=((IkReal(1.00000000000000))*(x445));
IkReal x458=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x458)))+(x454)+(((IkReal(-1.00000000000000))*(x445)*(x452))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x453)))+(x448)+(((IkReal(-1.00000000000000))*(x444)*(x452))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x445)*(x446)))+(((IkReal(0.573576689470092))*(x444)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x445)))+(((IkReal(-1.00000000000000))*(x444)*(x446)))+(new_r21));
evalcond[4]=((((IkReal(0.819151867053070))*(x450)))+(x444)+(((new_r10)*(x447)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((((IkReal(0.819151867053070))*(x444)))+(x456)+(x450)+(((x445)*(x449))));
evalcond[6]=((x455)+(x451)+(((x444)*(x449)))+(((IkReal(-0.819151867053070))*(x445))));
evalcond[7]=((((IkReal(0.819151867053070))*(x455)))+(((IkReal(-1.00000000000000))*(x457)))+(((new_r11)*(x447)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[8]=((((cj3)*(x454)))+(((IkReal(-1.00000000000000))*(x457)))+(((new_r20)*(x446)))+(((IkReal(-1.00000000000000))*(x449)*(x456)))+(((IkReal(-1.00000000000000))*(x449)*(x450)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x452))));
evalcond[9]=((((new_r21)*(x446)))+(((IkReal(-1.00000000000000))*(x444)))+(((IkReal(-1.00000000000000))*(x452)*(x453)))+(((cj3)*(x448)))+(((IkReal(-1.00000000000000))*(x449)*(x455)))+(((IkReal(-1.00000000000000))*(x449)*(x451))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - jaco (0d125393294b9c251ef6aa3ae79e27b3)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
